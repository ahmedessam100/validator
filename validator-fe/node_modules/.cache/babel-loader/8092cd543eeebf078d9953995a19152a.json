{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ahmed/WebstormProjects/test/src/components/DataLister.js\";\nimport React, { Component } from 'react';\nimport Rows from \"./Rows\";\nconst countryToCode = {\n  'Cameroon': '237',\n  'Ethiopia': '251',\n  'Morocco': '212',\n  'Mozambique': '258',\n  'Uganda': '256'\n};\nconst codeToCountry = {\n  '237': 'Cameroon',\n  '251': 'Ethiopia',\n  '212': 'Morocco',\n  '258': 'Mozambique',\n  '256': 'Uganda'\n};\nconst codeToRegex = {\n  '237': /\\(237\\)\\ ?[2368]\\d{7,8}$/,\n  '251': \"\\(251\\)\\ ?[1-59]\\d{8}$\",\n  '212': \"\\(212\\)\\ ?[5-9]\\d{8}$\",\n  '258': \"/\\(258\\)\\ ?[28]\\d{7,8}$\",\n  '256': \"/\\(256\\)\\ ?\\d{9}$/\"\n};\n\nclass DataLister extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isValid = (phoneNumber, code) => {\n      console.log(phoneNumber); // console.log(typeof codeToRegex[code]);\n      // console.log(phoneNumber.match(codeToRegex[code]));\n      // return phoneNumber.match(codeToRegex[code]);\n    };\n\n    this.fetchData = () => {\n      fetch('http://localhost:8080/getData').then(res => res.json()).then(res => this.setState({\n        data: res.reduce((_, currCustomer) => {\n          // console.log(currCustomer);\n          // // console.log(x);\n          let [code, phoneNumber] = currCustomer.phoneNumber.split(' ');\n          code = code.replace('(', '').replace(')', '');\n          let customer = {\n            name: currCustomer.name,\n            phoneNumber: phoneNumber,\n            code: code,\n            country: codeToCountry[code],\n            validation: this.isValid(currCustomer.phoneNumber, code)\n          };\n          return customer;\n        }),\n        dataReady: true\n      }));\n    };\n\n    this.state = {\n      dataReady: false,\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    if (!this.state.dataReady) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }, this);\n    }\n    /* Filling the cards array with cards */\n\n\n    const rows = [];\n    rows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Phone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }, this));\n    let name, phoneNumber, code, country;\n\n    for (let i = 0; i < this.state.data.length; i++) {\n      // name = this.state.data[i].name;\n      // [ code, phoneNumber ] = this.state.data[i].phoneNumber.split(' ');\n      // code = code.replace('(', '').replace(')', '');\n      // country = codeToCountry[code];\n      console.log(this.state.data);\n      rows.push( /*#__PURE__*/_jsxDEV(Rows, {\n        customerName: name,\n        phone: phoneNumber,\n        country: country,\n        code: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 23\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflow: \"auto;\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataLister;","map":{"version":3,"sources":["/home/ahmed/WebstormProjects/test/src/components/DataLister.js"],"names":["React","Component","Rows","countryToCode","codeToCountry","codeToRegex","DataLister","constructor","props","isValid","phoneNumber","code","console","log","fetchData","fetch","then","res","json","setState","data","reduce","_","currCustomer","split","replace","customer","name","country","validation","dataReady","state","componentDidMount","render","rows","push","i","length","overflow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Rows from \"./Rows\";\n\nconst countryToCode = {'Cameroon': '237',\n                       'Ethiopia': '251',\n                        'Morocco': '212',\n                        'Mozambique': '258',\n                        'Uganda': '256'\n};\n\nconst codeToCountry =  {'237': 'Cameroon',\n                        '251': 'Ethiopia',\n                        '212': 'Morocco',\n                        '258': 'Mozambique',\n                        '256': 'Uganda'\n};\n\nconst codeToRegex = {'237': /\\(237\\)\\ ?[2368]\\d{7,8}$/,\n                     '251': \"\\(251\\)\\ ?[1-59]\\d{8}$\",\n                     '212': \"\\(212\\)\\ ?[5-9]\\d{8}$\",\n                     '258': \"/\\(258\\)\\ ?[28]\\d{7,8}$\",\n                     '256': \"/\\(256\\)\\ ?\\d{9}$/\"\n};\n\nclass DataLister extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataReady: false,\n            data: []\n        };\n    }\n\n    isValid = (phoneNumber, code) => {\n\n        console.log(phoneNumber);\n        // console.log(typeof codeToRegex[code]);\n        // console.log(phoneNumber.match(codeToRegex[code]));\n        // return phoneNumber.match(codeToRegex[code]);\n    };\n\n    fetchData = () => {\n\n        fetch('http://localhost:8080/getData')\n            .then((res) => res.json())\n            .then((res) => this.setState({\n                data: res.reduce((_, currCustomer) => {\n                    // console.log(currCustomer);\n                    // // console.log(x);\n                    let [ code, phoneNumber ] = currCustomer.phoneNumber.split(' ');\n                    code = code.replace('(', '').replace(')', '');\n                    let customer = {\n                        name: currCustomer.name,\n                        phoneNumber: phoneNumber,\n                        code: code,\n                        country: codeToCountry[code],\n                        validation: this.isValid(currCustomer.phoneNumber, code)\n                    };\n                    return customer;\n                }),\n                dataReady: true\n            }));\n    };\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    render() {\n\n        if (!this.state.dataReady)\n        {\n            return <div />\n        }\n\n        /* Filling the cards array with cards */\n        const rows: JSX.Element[] = [];\n        rows.push(<tr>\n                    <th>Name</th>\n                    <th>Phone</th>\n                    <th>Country</th>\n                    <th>Code</th>\n                    {/*<th>State</th>*/}\n                </tr>);\n\n        let name, phoneNumber, code, country;\n\n        for (let i = 0; i < this.state.data.length; i++)\n        {\n            // name = this.state.data[i].name;\n            // [ code, phoneNumber ] = this.state.data[i].phoneNumber.split(' ');\n            // code = code.replace('(', '').replace(')', '');\n            // country = codeToCountry[code];\n            console.log(this.state.data);\n\n            rows.push(<Rows customerName={name} phone={phoneNumber} country={country} code={code}/>)\n        }\n\n        return (\n            <div style={{overflow:\"auto;\"}} >\n                <table>\n\n                    {rows}\n\n                </table>\n            </div>\n\n        );\n    }\n\n}\n\nexport default DataLister;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ahmed/WebstormProjects/test/src/components/DataLister.js\";\nimport React, { Component } from 'react';\nimport Rows from './Rows';\nimport { codeToCountry, codeToRegex } from './../Resources';\n\nclass DataLister extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isValid = (phoneNumber, code) => {\n      return RegExp(codeToRegex[code]).test(phoneNumber) ? 'valid' : 'not valid';\n    };\n\n    this.fetchData = () => {\n      console.log('hi');\n      fetch('http://localhost:8080/getData').then(res => res.json()).then(res => this.setState({\n        data: res.reduce((customers, currCustomer) => {\n          let [code, phoneNumber] = currCustomer.phoneNumber.split(' ');\n          code = code.replace('(', '').replace(')', '');\n          let customer = {\n            name: currCustomer.name,\n            phoneNumber: phoneNumber,\n            code: code,\n            country: codeToCountry[code],\n            validation: this.isValid(currCustomer.phoneNumber, code)\n          };\n          customers.push(customer);\n          return customers;\n        }, []),\n        dataReady: true\n      })).then(() => {\n        this.setState({\n          originalData: [...this.state.data]\n        });\n      }).catch(e => this.setState({\n        error: e,\n        dataReady: false\n      }));\n    };\n\n    this.filterData = e => {\n      e.preventDefault();\n      /* If there is not selection filter */\n\n      if (this.state.selection === '') {\n        return;\n      }\n\n      this.setState({\n        /* Filter the data according to the selection and the search key */\n        data: this.state.originalData.filter(customer => {\n          return customer[this.state.selection].startsWith(this.state.filterKey) === true;\n        })\n      });\n    };\n\n    this.handleChange = e => {\n      if (e.target.id === 'filterSelection') {\n        this.setState({\n          selection: e.target.value\n        });\n      } else if (e.target.id === 'searchKey') {\n        this.setState({\n          filterKey: e.target.value\n        });\n      }\n    };\n\n    this.reset = () => {\n      /* reset the data */\n      this.setState({\n        data: [...this.state.originalData]\n      });\n    };\n\n    this.state = {\n      dataReady: false,\n      data: [],\n      originalData: [],\n      filterKey: '',\n      selection: '',\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    /* If the data is not loaded */\n    if (!this.state.dataReady || this.state.error) {\n      return this.state.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 75\n      }, this);\n    }\n    /* Filling the table with rows */\n\n\n    const rows = [];\n    rows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Phone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this));\n    let customer;\n\n    for (let i = 0; i < this.state.data.length; i++) {\n      customer = this.state.data[i];\n      rows.push( /*#__PURE__*/_jsxDEV(Rows, {\n        customerName: customer.name,\n        phone: customer.phoneNumber,\n        country: customer.country,\n        code: '+' + customer.code,\n        state: customer.validation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 23\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflow: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            paddingLeft: 900,\n            fontSize: 30\n          },\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"filterSelection\",\n          onChange: this.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            selected: true,\n            disabled: true,\n            hidden: true,\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"country\",\n            children: \"Country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"validation\",\n            children: \"State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchKey\",\n          name: \"key\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          id: \"filter\",\n          value: \"Filter\",\n          onClick: this.filterData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          id: \"reset\",\n          value: \"Reset\",\n          onClick: this.reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: rows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataLister;","map":{"version":3,"sources":["/home/ahmed/WebstormProjects/test/src/components/DataLister.js"],"names":["React","Component","Rows","codeToCountry","codeToRegex","DataLister","constructor","props","isValid","phoneNumber","code","RegExp","test","fetchData","console","log","fetch","then","res","json","setState","data","reduce","customers","currCustomer","split","replace","customer","name","country","validation","push","dataReady","originalData","state","catch","e","error","filterData","preventDefault","selection","filter","startsWith","filterKey","handleChange","target","id","value","reset","componentDidMount","render","message","rows","textAlign","i","length","overflow","paddingLeft","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Rows from './Rows';\nimport { codeToCountry, codeToRegex } from './../Resources';\n\nclass DataLister extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataReady: false,\n            data: [],\n            originalData: [],\n            filterKey: '',\n            selection: '',\n            error: null\n        };\n    }\n\n    isValid = (phoneNumber, code) => {\n        return RegExp(codeToRegex[code]).test(phoneNumber) ? 'valid' : 'not valid';\n    };\n\n    fetchData = () => {\n        console.log('hi');\n        fetch('http://localhost:8080/getData')\n            .then((res) => res.json())\n            .then((res) => this.setState({\n                data: res.reduce((customers, currCustomer) => {\n                    let [ code, phoneNumber ] = currCustomer.phoneNumber.split(' ');\n                    code = code.replace('(', '').replace(')', '');\n\n                    let customer = {\n                        name: currCustomer.name,\n                        phoneNumber: phoneNumber,\n                        code: code,\n                        country: codeToCountry[code],\n                        validation: this.isValid(currCustomer.phoneNumber, code)\n                    };\n\n                    customers.push(customer);\n\n                    return customers;\n                }, []),\n\n                dataReady: true\n            }))\n            .then(() => {\n                this.setState({ originalData: [...this.state.data] } )\n            })\n            .catch((e) => this.setState({ error: e, dataReady: false }));\n    };\n\n    filterData = (e) => {\n\n        e.preventDefault();\n\n        /* If there is not selection filter */\n        if (this.state.selection === '')\n        {\n            return;\n        }\n\n        this.setState({\n            /* Filter the data according to the selection and the search key */\n            data: this.state.originalData.filter((customer) => {\n                return customer[this.state.selection].startsWith(this.state.filterKey) === true;\n            })\n        });\n    };\n\n    handleChange = (e) => {\n\n        if (e.target.id === 'filterSelection')\n        {\n            this.setState({ selection: e.target.value })\n        }\n        else if (e.target.id === 'searchKey')\n        {\n            this.setState({ filterKey : e.target.value })\n        }\n    };\n\n    reset = () => {\n        /* reset the data */\n        this.setState({\n            data: [...this.state.originalData]\n        })\n    };\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    render() {\n\n        /* If the data is not loaded */\n        if (!this.state.dataReady || this.state.error)\n        {\n            return this.state.error ? <p>{this.state.error.message}</p> : <div />\n        }\n\n        /* Filling the table with rows */\n        const rows: JSX.Element[] = [];\n        rows.push(<tr>\n                        <th style={{textAlign: \"center\"}}>Name</th>\n                        <th style={{textAlign: \"center\"}}>Country</th>\n                        <th style={{textAlign: \"center\"}}>Code</th>\n                        <th style={{textAlign: \"center\"}}>Phone</th>\n                        <th style={{textAlign: \"center\"}}>State</th>\n                  </tr>);\n\n        let customer;\n\n        for (let i = 0; i < this.state.data.length; i++)\n        {\n            customer = this.state.data[i];\n\n            rows.push(<Rows customerName={customer.name} phone={customer.phoneNumber} country={customer.country} code={'+' + customer.code} state={customer.validation}/>)\n        }\n\n        return (\n            <React.Fragment>\n            <div style={{overflow:\"auto\"}} >\n\n                <label style={{paddingLeft: 900, fontSize: 30}}>Filter</label>\n\n                <select id={\"filterSelection\"} onChange={ this.handleChange }>\n                    <option value=\"\" selected disabled hidden>Select</option>\n                    <option value={\"country\"}>Country</option>\n                    <option value={\"validation\"}>State</option>\n                </select>\n\n                <input type=\"text\" id=\"searchKey\" name=\"key\" onChange={ this.handleChange }/>\n                <input type={\"submit\"} id={\"filter\"} value={\"Filter\"} onClick={ this.filterData }/>\n                <input type={\"submit\"} id={\"reset\"}  value={\"Reset\"} onClick={ this.reset }/>\n\n                <table>\n                    {rows}\n                </table>\n\n            </div>\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default DataLister;\n"]},"metadata":{},"sourceType":"module"}